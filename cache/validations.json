{
  "version": "3.2",
  "log": [
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "65af7437ced43ce9f9e64341fd0e6c786502fe11873d780aa1102ec85d5db06f",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:29"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:38"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:41"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:54"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "c0e02668029c5caf1c83a39563fba3d201ab276ccf53fc7d899816714c8aff2c",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "61a1e2dc85865a46d29833ab6eaa1f442d6d9dc38809685821f5ffae63894087",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4715",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4745_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4715": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4745_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4745_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4733_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4733_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "20123dc53d3b7b9abba75035caad1c2de50d53e3cf8042664d983550becef425",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6172_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6172_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6691_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6691_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d03e88b13dcdbbeea3f98a207d454f4c9ae0e6ac4eea2eb420c6ca677c8651ab",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4715",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4745_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4715": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4745_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4745_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4733_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4733_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6172_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6172_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6691_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6691_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "43f147fc28a957278439bc6e7f3e881db2fd4409b9b9c13a5bee053d68b02beb",
          "withoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df",
          "linkedWithoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d03e88b13dcdbbeea3f98a207d454f4c9ae0e6ac4eea2eb420c6ca677c8651ab",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4715",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4745_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4715": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4745_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4745_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4733_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4733_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6172_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6172_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6691_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6691_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:7",
        "version": {
          "withMetadata": "43f147fc28a957278439bc6e7f3e881db2fd4409b9b9c13a5bee053d68b02beb",
          "withoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df",
          "linkedWithoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d03e88b13dcdbbeea3f98a207d454f4c9ae0e6ac4eea2eb420c6ca677c8651ab",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4715",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4745_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4715": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4745_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4745_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4733_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4733_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6172_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6172_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6691_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6691_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:6",
        "version": {
          "withMetadata": "a061f74b993fff33f5ed819f4c887ab257a42a48ee40236c3e3fcc0341a1409e",
          "withoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df",
          "linkedWithoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d03e88b13dcdbbeea3f98a207d454f4c9ae0e6ac4eea2eb420c6ca677c8651ab",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)6017",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)5451",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)6017": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)5451": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)4962_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)4962_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)4962_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)4962_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)5481_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)5481_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)5481_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)5481_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d03e88b13dcdbbeea3f98a207d454f4c9ae0e6ac4eea2eb420c6ca677c8651ab",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4715",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4745_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4715": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4745_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4745_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4733_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4733_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6172_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6172_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6691_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6691_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:6",
        "version": {
          "withMetadata": "b89ff75b98929ea57cbe8f210f35241f5e82ece07600d30343d1a13c3b71a21e",
          "withoutMetadata": "58c14ab6c890c7a6bd3511bedb1da252cafa4fbe5e657b703fb4c2c06f44d716",
          "linkedWithoutMetadata": "58c14ab6c890c7a6bd3511bedb1da252cafa4fbe5e657b703fb4c2c06f44d716"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d03e88b13dcdbbeea3f98a207d454f4c9ae0e6ac4eea2eb420c6ca677c8651ab",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4715",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4745_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4715": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4745_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4745_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4733_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4733_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6172_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6172_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6691_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6691_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:6",
        "version": {
          "withMetadata": "a061f74b993fff33f5ed819f4c887ab257a42a48ee40236c3e3fcc0341a1409e",
          "withoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df",
          "linkedWithoutMetadata": "b4bbef225a00ddd151cd2bd19dc99e1786884379b42fe3c8cd5e9b973350c2df"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d03e88b13dcdbbeea3f98a207d454f4c9ae0e6ac4eea2eb420c6ca677c8651ab",
          "withoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4",
          "linkedWithoutMetadata": "f4954e491f463b2a71d721a6ade19dd7cecea27e16a112eedd84049481ee0ff4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4715",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4745_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7227",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6661",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4715": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4745_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4745_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4733_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4733_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4733_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7227": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6661": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6172_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6172_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6172_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6691_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6691_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6691_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "e2b700c6f671e8ac6cc1d4fc73cc9d6199f350f884deaa61836ea5a744c92820",
          "withoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76",
          "linkedWithoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "e2b700c6f671e8ac6cc1d4fc73cc9d6199f350f884deaa61836ea5a744c92820",
          "withoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76",
          "linkedWithoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "b9a44f960edd93cbe428adfbc4f61451b5dfdb5af3b0c5773627e1071337237e",
          "withoutMetadata": "9e8db481d3f4e4002dc7bf86e83b26701471b4306660ecd3c02e1e4b756622fe",
          "linkedWithoutMetadata": "9e8db481d3f4e4002dc7bf86e83b26701471b4306660ecd3c02e1e4b756622fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)6025",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)5459",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)6025": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)5459": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)4970_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)4970_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)4970_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)4970_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)5489_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)5489_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)5489_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)5489_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)1168_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)1168_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)1168_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)1168_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)248",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)1404_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)248": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)1404_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)1404_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)1404_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1137_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1137_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1137_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)1137_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "b9a44f960edd93cbe428adfbc4f61451b5dfdb5af3b0c5773627e1071337237e",
          "withoutMetadata": "9e8db481d3f4e4002dc7bf86e83b26701471b4306660ecd3c02e1e4b756622fe",
          "linkedWithoutMetadata": "9e8db481d3f4e4002dc7bf86e83b26701471b4306660ecd3c02e1e4b756622fe"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)248",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)1404_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)248": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)1404_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)1404_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)1404_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChef.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "e2b700c6f671e8ac6cc1d4fc73cc9d6199f350f884deaa61836ea5a744c92820",
          "withoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76",
          "linkedWithoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)6025",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)5459",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)6025": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)5459": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)4970_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)4970_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)4970_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)4970_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)5489_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)5489_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)5489_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)5489_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "e2b700c6f671e8ac6cc1d4fc73cc9d6199f350f884deaa61836ea5a744c92820",
          "withoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76",
          "linkedWithoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "736cf4da6229dab05b27e46339ef5e911e6ada1092f3a6425c231d35ede4c06a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "43884bd3630a2ce94a048117cc78345b0b24f9896edcaea05c38857b3983adfb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "b16cf9dcae9dc0d2804d802adab7f740458159ae514dcbd00712eaa5f9fbffb0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "76ea9539505122eeb6e80bce612dd030c49833517edbb3e8034b6f0ada93786d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "6c3d97ff81bad105956093d4a8ce4e1187992a72137763c7e3c23cbb48bd2d7e",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "24e15811eff904bddec3b4a77d7d097443e4ff8b3be5945d4f8e07ef9643048e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "29005a7fd9e57b439a1120aadb2017cc5e4ab490ad1c1be7d7ecdde2c2ffc950",
          "withoutMetadata": "63c4684e111eee099772132a247c308d05022332255e769b2e6a70791ead1950",
          "linkedWithoutMetadata": "63c4684e111eee099772132a247c308d05022332255e769b2e6a70791ead1950"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d3f609d689824c80fa74724d487e57fbca858376bc3a94e4702dc701b056dd69",
          "withoutMetadata": "30390a03714dc60bb40743e8b8fcf61d6a2e89d64cbf004480fddd8e2177a454",
          "linkedWithoutMetadata": "30390a03714dc60bb40743e8b8fcf61d6a2e89d64cbf004480fddd8e2177a454"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "4bb80ddbd42ba71dac3993ccdba40657c3ff0416256b90a21b63365b0bb81dd1",
          "withoutMetadata": "bb19ba27dca7014459052e1505fdb1ab37a3f35055b38155ca6369b32383a616",
          "linkedWithoutMetadata": "bb19ba27dca7014459052e1505fdb1ab37a3f35055b38155ca6369b32383a616"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "ce38edbbf9aa3c9fa480778691a9b281f843623bfcd475fd953938888f52c238",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "2d2e31caee8dbecca2c311982d46d6abe3be8c17b0d594f2de215193ed419107",
          "withoutMetadata": "8839d020d31973b4d437b2dcbfb0085f92b89d5f7453588699eb0e19d29a733a",
          "linkedWithoutMetadata": "8839d020d31973b4d437b2dcbfb0085f92b89d5f7453588699eb0e19d29a733a"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "469c8e5265209e1393b7fcb3962b78aa23ca1fe9bfd33fa8e10db6f27dca36e7",
          "withoutMetadata": "2e8bb256e2891094b40c4415524657fe2be24fc4571f437bf35ffa11adbc3ce2",
          "linkedWithoutMetadata": "2e8bb256e2891094b40c4415524657fe2be24fc4571f437bf35ffa11adbc3ce2"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "4b816050518b14cd5a0717ba1b6223f5330d0fdacdd2c92afd4a49c1cc39efe7",
          "withoutMetadata": "a5fd809c48da5bb42029d0b68a39772364ea49d505ca38ac40d00d9b01aad22e",
          "linkedWithoutMetadata": "a5fd809c48da5bb42029d0b68a39772364ea49d505ca38ac40d00d9b01aad22e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)1168_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)1168_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)1168_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)1168_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)248",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)1404_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)248": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)1404_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)1404_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)1404_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1137_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)1137_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)1137_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)1137_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "e2b700c6f671e8ac6cc1d4fc73cc9d6199f350f884deaa61836ea5a744c92820",
          "withoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76",
          "linkedWithoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "736cf4da6229dab05b27e46339ef5e911e6ada1092f3a6425c231d35ede4c06a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "43884bd3630a2ce94a048117cc78345b0b24f9896edcaea05c38857b3983adfb",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "b16cf9dcae9dc0d2804d802adab7f740458159ae514dcbd00712eaa5f9fbffb0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "76ea9539505122eeb6e80bce612dd030c49833517edbb3e8034b6f0ada93786d",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "6c3d97ff81bad105956093d4a8ce4e1187992a72137763c7e3c23cbb48bd2d7e",
          "withoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07",
          "linkedWithoutMetadata": "e8c20c99b50b261e4c32f57d29e546520328867840953c28a460b0411c17ca07"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "24e15811eff904bddec3b4a77d7d097443e4ff8b3be5945d4f8e07ef9643048e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "29005a7fd9e57b439a1120aadb2017cc5e4ab490ad1c1be7d7ecdde2c2ffc950",
          "withoutMetadata": "63c4684e111eee099772132a247c308d05022332255e769b2e6a70791ead1950",
          "linkedWithoutMetadata": "63c4684e111eee099772132a247c308d05022332255e769b2e6a70791ead1950"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "d3f609d689824c80fa74724d487e57fbca858376bc3a94e4702dc701b056dd69",
          "withoutMetadata": "30390a03714dc60bb40743e8b8fcf61d6a2e89d64cbf004480fddd8e2177a454",
          "linkedWithoutMetadata": "30390a03714dc60bb40743e8b8fcf61d6a2e89d64cbf004480fddd8e2177a454"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "4bb80ddbd42ba71dac3993ccdba40657c3ff0416256b90a21b63365b0bb81dd1",
          "withoutMetadata": "bb19ba27dca7014459052e1505fdb1ab37a3f35055b38155ca6369b32383a616",
          "linkedWithoutMetadata": "bb19ba27dca7014459052e1505fdb1ab37a3f35055b38155ca6369b32383a616"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "ce38edbbf9aa3c9fa480778691a9b281f843623bfcd475fd953938888f52c238",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "2d2e31caee8dbecca2c311982d46d6abe3be8c17b0d594f2de215193ed419107",
          "withoutMetadata": "8839d020d31973b4d437b2dcbfb0085f92b89d5f7453588699eb0e19d29a733a",
          "linkedWithoutMetadata": "8839d020d31973b4d437b2dcbfb0085f92b89d5f7453588699eb0e19d29a733a"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "469c8e5265209e1393b7fcb3962b78aa23ca1fe9bfd33fa8e10db6f27dca36e7",
          "withoutMetadata": "2e8bb256e2891094b40c4415524657fe2be24fc4571f437bf35ffa11adbc3ce2",
          "linkedWithoutMetadata": "2e8bb256e2891094b40c4415524657fe2be24fc4571f437bf35ffa11adbc3ce2"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "4b816050518b14cd5a0717ba1b6223f5330d0fdacdd2c92afd4a49c1cc39efe7",
          "withoutMetadata": "a5fd809c48da5bb42029d0b68a39772364ea49d505ca38ac40d00d9b01aad22e",
          "linkedWithoutMetadata": "a5fd809c48da5bb42029d0b68a39772364ea49d505ca38ac40d00d9b01aad22e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1967UpgradeUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:18",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "StorageSlotUpgradeable",
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC1967UpgradeUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol:214"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IBeaconUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "UUPSUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:20",
        "inherit": [
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "UUPSUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol:80"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol:17",
        "version": {
          "withMetadata": "f56ff178004128fd6228c5853cf4a1ae860792b1d4b8eecdc35673e36c17641a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol:10",
        "inherit": [
          "IERC165Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "ea2924b56d3f9042972097f39a35162c6a83b61adedff2dcca36830757cbe97c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StorageSlotUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol:31",
        "version": {
          "withMetadata": "d20e3292d99b50f1bac87e62ae5c3faebd45ece77083b3856006873903196454",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol:15",
        "version": {
          "withMetadata": "a1961a4b3dd25cb4eb943762342d9accbcf03925cfa52afafb013de4865197de",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "950ed0eb0881a73cc557739090bbf96f68e7b8b125fc0abb2bde97aab68a2ab2",
          "withoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9",
          "linkedWithoutMetadata": "12f47a1ed671f6f8d9792a1147c4cc054682a9eea5924e5a7c20876c128b85d9"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:15",
        "version": {
          "withMetadata": "0b28facf0e5b08765a148a5bf8897f953e2eefae6c66683b9edcb43fde645e41",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FiroToken": {
        "src": "contracts/FiroToken.sol:13",
        "version": {
          "withMetadata": "e495bde4aa9b62fdb090d4f5ef0bb4e52dca1557f9bb88e07e0fe24bf4c17d52",
          "withoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813",
          "linkedWithoutMetadata": "cac53ff8bbb77c81a1a85c4e08008263f10fdd48fba65f2e478b62f6bb44d813"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "mint(address,uint256)",
          "delegates(address)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
          "getCurrentVotes(address)",
          "getPriorVotes(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "FiroToken",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/FiroToken.sol:28"
            },
            {
              "contract": "FiroToken",
              "label": "checkpoints",
              "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))",
              "src": "contracts/FiroToken.sol:37"
            },
            {
              "contract": "FiroToken",
              "label": "numCheckpoints",
              "type": "t_mapping(t_address,t_uint32)",
              "src": "contracts/FiroToken.sol:40"
            },
            {
              "contract": "FiroToken",
              "label": "nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/FiroToken.sol:49"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)2918_storage))": {
              "label": "mapping(address => mapping(uint32 => struct FiroToken.Checkpoint))"
            },
            "t_mapping(t_uint32,t_struct(Checkpoint)2918_storage)": {
              "label": "mapping(uint32 => struct FiroToken.Checkpoint)"
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_struct(Checkpoint)2918_storage": {
              "label": "struct FiroToken.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint32)": {
              "label": "mapping(address => uint32)"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IMigratorChef": {
        "src": "contracts/MasterChefUpgradeable.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "migrate(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MasterChef": {
        "src": "contracts/MasterChef.sol:38",
        "version": {
          "withMetadata": "e2b700c6f671e8ac6cc1d4fc73cc9d6199f350f884deaa61836ea5a744c92820",
          "withoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76",
          "linkedWithoutMetadata": "d349bd146ab417da4cbba5e79e706942ca27295a46a2f0c5fb41fef139aa6a76"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChef",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChef.sol:68"
            },
            {
              "contract": "MasterChef",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChef.sol:71"
            },
            {
              "contract": "MasterChef",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:73"
            },
            {
              "contract": "MasterChef",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:75"
            },
            {
              "contract": "MasterChef",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)3531",
              "src": "contracts/MasterChef.sol:77"
            },
            {
              "contract": "MasterChef",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)3561_storage)dyn_storage",
              "src": "contracts/MasterChef.sol:79"
            },
            {
              "contract": "MasterChef",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))",
              "src": "contracts/MasterChef.sol:81"
            },
            {
              "contract": "MasterChef",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:83"
            },
            {
              "contract": "MasterChef",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:85"
            },
            {
              "contract": "MasterChef",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChef.sol:87"
            },
            {
              "contract": "MasterChef",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChef.sol:89"
            },
            {
              "contract": "MasterChef",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:91"
            },
            {
              "contract": "MasterChef",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChef.sol:93"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)3531": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)3561_storage)dyn_storage": {
              "label": "struct MasterChef.PoolInfo[]"
            },
            "t_struct(PoolInfo)3561_storage": {
              "label": "struct MasterChef.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3549_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)3549_storage)": {
              "label": "mapping(address => struct MasterChef.UserInfo)"
            },
            "t_struct(UserInfo)3549_storage": {
              "label": "struct MasterChef.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MasterChefUpgradeable": {
        "src": "contracts/MasterChefUpgradeable.sol:36",
        "version": {
          "withMetadata": "a726365e66c78ce0de47cc6727fc67eaf147d24625ab9c1449985bed74986abc",
          "withoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a",
          "linkedWithoutMetadata": "c3278626b28487691cdf1612bb69de64e4c0d2f665ac2532f96b1c47ac2fab9a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "UUPSUpgradeable",
          "ERC1967UpgradeUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address,address,address,uint256,uint256,uint256,uint256,uint256)",
          "()",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setMigrator(address)",
          "migrate(uint256)",
          "getMultiplier(uint256,uint256)",
          "pendingFiro(uint256,address)",
          "massUpdatePools()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "emergencyWithdraw(uint256)",
          "setEmergency(uint256,bool)",
          "dev(address)",
          "getUserInfo(uint256,address)",
          "getPoolInfo(uint256)",
          "unlockVesting(address)",
          "lock(address,address,uint256,uint256)",
          "unlock(address,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)",
          "setStartBlock(uint256)",
          "getStartBlock()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "MasterChefUpgradeable",
              "label": "firo",
              "type": "t_contract(FiroToken)3510",
              "src": "contracts/MasterChefUpgradeable.sol:66"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "devaddr",
              "type": "t_address",
              "src": "contracts/MasterChefUpgradeable.sol:69"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "bonusEndBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:71"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "firoPerBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:73"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "migrator",
              "type": "t_contract(IMigratorChef)4723",
              "src": "contracts/MasterChefUpgradeable.sol:75"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "poolInfo",
              "type": "t_array(t_struct(PoolInfo)4753_storage)dyn_storage",
              "src": "contracts/MasterChefUpgradeable.sol:77"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "userInfo",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))",
              "src": "contracts/MasterChefUpgradeable.sol:79"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "totalAllocPoint",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:81"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "startBlock",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:83"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vesting",
              "type": "t_contract(Vesting)7235",
              "src": "contracts/MasterChefUpgradeable.sol:85"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "locking",
              "type": "t_contract(Locking)6669",
              "src": "contracts/MasterChefUpgradeable.sol:87"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "lockingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:89"
            },
            {
              "contract": "MasterChefUpgradeable",
              "label": "vestingDuration",
              "type": "t_uint256",
              "src": "contracts/MasterChefUpgradeable.sol:91"
            }
          ],
          "types": {
            "t_contract(FiroToken)3510": {
              "label": "contract FiroToken"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IMigratorChef)4723": {
              "label": "contract IMigratorChef"
            },
            "t_array(t_struct(PoolInfo)4753_storage)dyn_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo[]"
            },
            "t_struct(PoolInfo)4753_storage": {
              "label": "struct MasterChefUpgradeable.PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20Upgradeable)767"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256"
                },
                {
                  "label": "accFiroPerShare",
                  "type": "t_uint256"
                },
                {
                  "label": "isEmergency",
                  "type": "t_bool"
                }
              ]
            },
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4741_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefUpgradeable.UserInfo))"
            },
            "t_mapping(t_address,t_struct(UserInfo)4741_storage)": {
              "label": "mapping(address => struct MasterChefUpgradeable.UserInfo)"
            },
            "t_struct(UserInfo)4741_storage": {
              "label": "struct MasterChefUpgradeable.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256"
                }
              ]
            },
            "t_contract(Vesting)7235": {
              "label": "contract Vesting"
            },
            "t_contract(Locking)6669": {
              "label": "contract Locking"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ILocking": {
        "src": "contracts/interfaces/ILocking.sol:3",
        "inherit": [],
        "libraries": [],
        "methods": [
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "BlackholePrevention": {
        "src": "contracts/lib/BlackholePrevention.sol:18",
        "version": {
          "withMetadata": "5a2ef4d53ff5c260dfe19b928002eb2b94424c368783430970811037ed80a7c9",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [
          "AddressUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Locking": {
        "src": "contracts/lib/Locking.sol:9",
        "version": {
          "withMetadata": "5ba8721bccb2f684923fec7ebf82bc53383904d10d82d23c850b07d95db3f145",
          "withoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389",
          "linkedWithoutMetadata": "08ce64cc032243a5151b6074ff70e4db602d6e15cc6c761256bce612a96ef389"
        },
        "inherit": [
          "ILocking",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address)",
          "setLockers(address[],bool)",
          "unlock(address,uint256)",
          "lock(address,address,uint256,uint256)",
          "getLockInfo(address)",
          "getLockInfoByIndexes(address,uint256[])",
          "getLockInfoLength(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Locking",
              "label": "lockInfo",
              "type": "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)",
              "src": "contracts/lib/Locking.sol:20"
            },
            {
              "contract": "Locking",
              "label": "lockers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Locking.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_array(t_struct(LockInfo)6180_storage)dyn_storage)": {
              "label": "mapping(address => struct Locking.LockInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(LockInfo)6180_storage)dyn_storage": {
              "label": "struct Locking.LockInfo[]"
            },
            "t_struct(LockInfo)6180_storage": {
              "label": "struct Locking.LockInfo",
              "members": [
                {
                  "label": "isWithdrawn",
                  "type": "t_bool"
                },
                {
                  "label": "token",
                  "type": "t_address"
                },
                {
                  "label": "unlockableAt",
                  "type": "t_uint256"
                },
                {
                  "label": "amount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Vesting": {
        "src": "contracts/lib/Vesting.sol:11",
        "version": {
          "withMetadata": "91e0b503c98829587b59c6dbcfe763ada61e3cf518d590988e1d91652aa1f3c4",
          "withoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c",
          "linkedWithoutMetadata": "9f674d6163b9156afcffcfe01ebd9618ed9291b9b7a941009edef6df2e7bfd2c"
        },
        "inherit": [
          "BlackholePrevention",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable",
          "SafeERC20Upgradeable"
        ],
        "methods": [
          "initialize(address,address)",
          "setVesters(address[],bool)",
          "addVesting(address,uint256,uint256,uint256)",
          "unlockVesting(address)",
          "getUnlockable(address)",
          "getUnlockableVesting(address,uint256)",
          "getLockedInfo(address)",
          "sendRewardForDev(address,uint256)",
          "withdrawEther(address payable,uint256)",
          "withdrawERC20(address payable,address,uint256)",
          "withdrawERC721(address payable,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Vesting",
              "label": "token",
              "type": "t_contract(IERC20Upgradeable)767",
              "src": "contracts/lib/Vesting.sol:22"
            },
            {
              "contract": "Vesting",
              "label": "vestings",
              "type": "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)",
              "src": "contracts/lib/Vesting.sol:23"
            },
            {
              "contract": "Vesting",
              "label": "startVestingTime",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:24"
            },
            {
              "contract": "Vesting",
              "label": "duration",
              "type": "t_uint256",
              "src": "contracts/lib/Vesting.sol:25"
            },
            {
              "contract": "Vesting",
              "label": "vesters",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/lib/Vesting.sol:26"
            }
          ],
          "types": {
            "t_contract(IERC20Upgradeable)767": {
              "label": "contract IERC20Upgradeable"
            },
            "t_mapping(t_address,t_array(t_struct(VestingInfo)6699_storage)dyn_storage)": {
              "label": "mapping(address => struct Vesting.VestingInfo[])"
            },
            "t_address": {
              "label": "address"
            },
            "t_array(t_struct(VestingInfo)6699_storage)dyn_storage": {
              "label": "struct Vesting.VestingInfo[]"
            },
            "t_struct(VestingInfo)6699_storage": {
              "label": "struct Vesting.VestingInfo",
              "members": [
                {
                  "label": "releasedAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "totalAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "startVestingTime",
                  "type": "t_uint256"
                },
                {
                  "label": "duration",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Mock": {
        "src": "contracts/mock/ERC20Mock.sol:8",
        "version": {
          "withMetadata": "323a8bd6a2cb0c230444c75aa3a0eb66d1c969ef75e30154595ab9b78f5cc8c8",
          "withoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e",
          "linkedWithoutMetadata": "80d0dcda864db784533d007129600a16d71f737398e2abd220cbc3571dc7fe3e"
        },
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "burn(address,uint256)",
          "transferInternal(address,address,uint256)",
          "approveInternal(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Mock",
            "src": "contracts/mock/ERC20Mock.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}